#N canvas 737 141 663 602 10;
#X obj 27 40 inlet;
#X msg 27 108 open \$1;
#X msg 82 86 close;
#X msg 137 86 devicename \$1;
#X obj 27 371 select 255;
#X text 105 368 0xff denotes the beginning of the data stream;
#X obj 27 463 t b b b b;
#X obj 152 237 route open;
#X obj 167 131 loadbang;
#X msg 167 153 info;
#X obj 239 215 spigot 1;
#X obj 167 175 t a b;
#X obj 239 192 del 100;
#X msg 304 198 0;
#X text 213 155 send "info" message repetedly until you retrieve the
"open" state;
#X obj 152 259 sel 1;
#X obj 27 220 comport \$1 57600;
#N canvas 925 158 775 466 route_data 0;
#X obj 27 127 inlet;
#X obj 57 298 spigot;
#X obj 50 172 spigot 1;
#X obj 240 414 outlet data_type;
#X obj 57 414 outlet data;
#X obj 57 321 swap;
#X obj 57 343 pack;
#X obj 57 365 route 0 1;
#X obj 96 276 r \$0-route_all_data;
#X obj 103 127 r \$0-route_all_data;
#X obj 283 222 s \$0-route_all_data;
#X obj 103 149 == 0;
#X obj 50 215 1;
#X obj 283 200 0;
#X obj 50 237 s \$0-route_all_data;
#X obj 50 194 t b f;
#X obj 283 125 spigot;
#X obj 322 101 1;
#X obj 355 108 0;
#X obj 283 147 t b b;
#X obj 322 78 r \$0-pots_done;
#X obj 294 171 r \$0-reset_main_router;
#X obj 27 149 t b f f;
#X text 306 25 when pots are done \, we're waiting for the last byte
to trigger the [spigot] reset because of bottom-to-top execution order
;
#X connect 0 0 22 0;
#X connect 1 0 5 0;
#X connect 2 0 15 0;
#X connect 5 0 6 0;
#X connect 5 1 6 1;
#X connect 6 0 7 0;
#X connect 7 0 4 0;
#X connect 7 1 3 0;
#X connect 8 0 1 1;
#X connect 9 0 11 0;
#X connect 11 0 2 1;
#X connect 12 0 14 0;
#X connect 13 0 10 0;
#X connect 15 0 12 0;
#X connect 15 1 5 1;
#X connect 16 0 19 0;
#X connect 17 0 16 1;
#X connect 18 0 16 1;
#X connect 19 0 13 0;
#X connect 19 1 18 0;
#X connect 20 0 17 0;
#X connect 21 0 13 0;
#X connect 22 0 16 0;
#X connect 22 1 2 0;
#X connect 22 2 1 0;
#X restore 165 388 pd route_data;
#N canvas 1017 289 850 671 ardu_messages 0;
#X obj 332 201 list prepend;
#X obj 19 285 list;
#X obj 278 463 list prepend;
#X obj 278 485 t l l;
#X obj 253 508 list;
#X obj 19 401 t b f;
#X msg 51 423 symbol buffer_free\$1;
#X obj 19 440 s;
#X obj 253 596 outlet;
#X obj 19 218 spigot;
#X obj 300 178 t b f;
#X msg 300 201 1;
#X obj 19 240 t b b;
#X msg 58 195 0;
#X obj 221 393 t b b;
#X text 246 68 let the serial buffer clear first;
#X obj 278 439 r ardu_mess;
#X text 307 597 send the concatenated list to the Teensy with start
and end characters;
#X obj 253 530 list prepend 60;
#X obj 253 552 list append 62;
#X text 370 530 ASCII <;
#X text 361 553 ASCII >;
#X obj 286 106 r module_active;
#X text 401 107 receive the active module index;
#X obj 286 128 t f f;
#X obj 300 154 f;
#X obj 409 322 sel 0;
#X obj 332 268 t l l l;
#X text 343 344 since a module can have more than one LEDs \, or more
than one generic data could be sent (with the generic index 0) \, we
must check if the incoming index has been already stored. if it is
not found \, store it;
#X obj 153 376 t b b b;
#X text 363 439 concatenate the various messages into one list;
#X text 24 306 store indexes of active modules;
#X text 16 460 trigger the active modules;
#X text 67 238 let the bang through only when at least one message
for the Arduino is ready to be sent;
#X obj 19 91 spigot 1;
#X obj 19 39 metro 10;
#X obj 19 16 loadbang;
#X text 88 39 poll the available messages;
#X obj 19 359 list-abs/list-drip;
#X obj 286 298 list-abs/list-find;
#X obj 253 574 list trim;
#X obj 72 67 r \$0-serial_buffer_clear;
#X connect 0 0 27 0;
#X connect 1 0 38 0;
#X connect 2 0 3 0;
#X connect 3 0 4 1;
#X connect 3 1 2 1;
#X connect 4 0 18 0;
#X connect 5 0 7 0;
#X connect 5 1 6 0;
#X connect 6 0 7 1;
#X connect 9 0 12 0;
#X connect 10 0 11 0;
#X connect 10 1 0 0;
#X connect 11 0 9 1;
#X connect 12 0 1 0;
#X connect 12 1 13 0;
#X connect 13 0 9 1;
#X connect 14 0 2 1;
#X connect 14 1 4 0;
#X connect 16 0 2 0;
#X connect 18 0 19 0;
#X connect 19 0 40 0;
#X connect 22 0 24 0;
#X connect 24 0 39 0;
#X connect 24 1 25 1;
#X connect 25 0 10 0;
#X connect 26 0 25 0;
#X connect 27 0 1 1;
#X connect 27 1 39 1;
#X connect 27 2 0 1;
#X connect 29 0 0 1;
#X connect 29 1 39 1;
#X connect 29 2 14 0;
#X connect 34 0 9 0;
#X connect 35 0 34 0;
#X connect 36 0 35 0;
#X connect 38 0 5 0;
#X connect 38 1 29 0;
#X connect 39 1 26 0;
#X connect 40 0 8 0;
#X connect 41 0 34 1;
#X restore 152 328 pd ardu_messages;
#N canvas 689 427 634 230 query_data_and_reset 0;
#X obj 49 92 inlet;
#X obj 49 136 outlet;
#X text 46 33 the following message occurs as soon as the patch opens
\, so we don't need to wait for the serial buffer to be freed;
#X msg 49 114 60 105 98 114 62;
#X text 174 112 ASCII < \, i \, b \, r \, and > for number of inputs/outputs
\, analog pin resolution \, and resetting connections and switches
states. < and > are start and end characters of messages;
#X connect 0 0 3 0;
#X connect 3 0 1 0;
#X restore 152 304 pd query_data_and_reset;
#X obj 152 282 t b b;
#X obj 27 62 route float close symbol;
#N canvas 921 82 557 208 pots_and_switches 0;
#X obj 49 42 inlet;
#N canvas 908 462 740 588 pots 0;
#X obj 66 48 inlet;
#X obj 66 70 t b f;
#X obj 96 142 + 1;
#X msg 119 108 -2;
#X msg 84 108 0;
#X obj 66 192 pack;
#X msg 142 520 symbol module\$1;
#X obj 66 537 s;
#X obj 66 336 repack;
#X obj 66 484 list prepend pots;
#X obj 66 239 * 128;
#X obj 66 263 +;
#X obj 66 164 t f f;
#X obj 159 181 sel 1;
#X obj 66 142 -2;
#X obj 66 506 list trim;
#X obj 119 84 r \$0-pots_done;
#X obj 126 406 s \$0-pots_done;
#X obj 66 358 spigot;
#X obj 253 281 r \$0-close_spigots;
#X msg 253 303 0;
#X obj 288 319 r \$0-open_spigots;
#X msg 288 341 1;
#X obj 76 304 r \$0-clear_repacks;
#X obj 86 456 outlet;
#X obj 66 382 t a b b b;
#X obj 106 430 s \$0-reset_main_router;
#X obj 66 214 route 1 0 -1 -2;
#X text 273 430 pots MUST reset main router as well due to more than
one module pot values arriving all with a single start character;
#X connect 0 0 1 0;
#X connect 1 0 14 0;
#X connect 1 1 5 1;
#X connect 2 0 14 1;
#X connect 3 0 14 1;
#X connect 4 0 14 1;
#X connect 5 0 27 0;
#X connect 6 0 7 1;
#X connect 8 0 18 0;
#X connect 9 0 15 0;
#X connect 10 0 11 0;
#X connect 11 0 8 0;
#X connect 12 0 5 0;
#X connect 12 1 13 0;
#X connect 13 0 4 0;
#X connect 14 0 2 0;
#X connect 14 0 12 0;
#X connect 15 0 7 0;
#X connect 16 0 3 0;
#X connect 18 0 25 0;
#X connect 19 0 20 0;
#X connect 20 0 18 1;
#X connect 21 0 22 0;
#X connect 22 0 18 1;
#X connect 23 0 8 0;
#X connect 25 0 9 0;
#X connect 25 1 24 0;
#X connect 25 2 26 0;
#X connect 25 3 17 0;
#X connect 27 0 10 0;
#X connect 27 1 11 1;
#X connect 27 2 8 1;
#X connect 27 3 6 0;
#X restore 49 92 pd pots;
#N canvas 573 215 603 711 switches 0;
#X obj 39 282 until;
#X obj 39 390 f;
#X obj 39 415 &;
#X obj 39 211 +;
#X obj 39 184 * 128;
#X obj 39 257 f;
#X obj 39 437 != 0;
#X obj 39 9 inlet;
#X obj 39 31 t b f;
#X obj 69 108 + 1;
#X obj 39 132 pack;
#X msg 120 641 symbol module\$1;
#X obj 39 108 f;
#X msg 78 78 0;
#X obj 39 518 repack;
#X obj 39 614 list prepend switches;
#X obj 39 636 list trim;
#X obj 39 658 s;
#X obj 39 233 t b f;
#X obj 79 334 swap 1;
#X obj 79 356 <<;
#X obj 39 154 route 4 3 2 1 0;
#X text 160 153 incoming bytes are module index \, number of switches
of current module \, number of pin the first switch is wired to \,
and input chip byte (split in two);
#X obj 78 55 r \$0-switches_done;
#X obj 71 584 s \$0-switches_done;
#X obj 39 540 spigot;
#X obj 232 463 r \$0-close_spigots;
#X msg 232 485 0;
#X obj 267 501 r \$0-open_spigots;
#X msg 267 523 1;
#X obj 39 562 t a b;
#X obj 71 390 * 2;
#X text 104 390 increse by a power of two;
#X text 130 331 start spliting bits from the pin number the first switch
is attached to (this replaces raising 2 to the incoming power);
#X obj 100 240 t f f;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 0 31 0;
#X connect 2 0 6 0;
#X connect 3 0 18 0;
#X connect 4 0 3 0;
#X connect 5 0 0 0;
#X connect 6 0 14 0;
#X connect 7 0 8 0;
#X connect 8 0 12 0;
#X connect 8 1 10 1;
#X connect 9 0 12 1;
#X connect 10 0 21 0;
#X connect 11 0 17 1;
#X connect 12 0 9 0;
#X connect 12 0 10 0;
#X connect 13 0 12 1;
#X connect 14 0 25 0;
#X connect 15 0 16 0;
#X connect 16 0 17 0;
#X connect 18 0 5 0;
#X connect 18 1 2 1;
#X connect 19 0 20 0;
#X connect 19 1 20 1;
#X connect 20 0 1 1;
#X connect 21 0 4 0;
#X connect 21 1 3 1;
#X connect 21 2 19 0;
#X connect 21 3 34 0;
#X connect 21 4 11 0;
#X connect 23 0 13 0;
#X connect 25 0 30 0;
#X connect 26 0 27 0;
#X connect 27 0 25 1;
#X connect 28 0 29 0;
#X connect 29 0 25 1;
#X connect 30 0 15 0;
#X connect 30 1 24 0;
#X connect 31 0 1 1;
#X connect 34 0 5 1;
#X connect 34 1 14 1;
#X restore 137 92 pd switches;
#N canvas 978 82 726 446 route_data 0;
#X obj 27 107 inlet;
#X obj 331 76 inlet;
#X obj 57 279 spigot;
#X obj 50 152 spigot 1;
#X obj 57 303 swap;
#X obj 57 325 pack;
#X obj 57 347 route 0 1;
#X obj 96 257 r \$0-route_mod_data;
#X obj 103 107 r \$0-route_mod_data;
#X obj 240 386 outlet switch_data;
#X obj 57 386 outlet pots_data;
#X obj 103 129 == 0;
#X obj 50 197 1;
#X obj 50 219 s \$0-route_mod_data;
#X obj 50 174 t b f;
#X obj 292 197 0;
#X obj 292 122 spigot;
#X obj 331 98 1;
#X obj 364 105 0;
#X obj 292 144 t b b;
#X obj 303 168 r \$0-reset_main_router;
#X obj 292 219 s \$0-route_mod_data;
#X obj 27 129 t b f f;
#X text 296 16 when pots are done \, we're waiting for the last byte
to trigger the [spigot] reset because of bottom-to-top execution order
;
#X connect 0 0 22 0;
#X connect 1 0 17 0;
#X connect 2 0 4 0;
#X connect 3 0 14 0;
#X connect 4 0 5 0;
#X connect 4 1 5 1;
#X connect 5 0 6 0;
#X connect 6 0 10 0;
#X connect 6 1 9 0;
#X connect 7 0 2 1;
#X connect 8 0 11 0;
#X connect 11 0 3 1;
#X connect 12 0 13 0;
#X connect 14 0 12 0;
#X connect 14 1 4 1;
#X connect 15 0 21 0;
#X connect 16 0 19 0;
#X connect 17 0 16 1;
#X connect 18 0 16 1;
#X connect 19 0 15 0;
#X connect 19 1 18 0;
#X connect 20 0 15 0;
#X connect 22 0 16 0;
#X connect 22 1 3 0;
#X connect 22 2 2 0;
#X restore 49 68 pd route_data;
#X text 46 120 pots MUST reset their own router \, because potentiometers
all arrive together \, from all active modules \, and no start character
(255) is printed in between the module pot values;
#X connect 0 0 3 0;
#X connect 1 0 3 1;
#X connect 3 0 1 0;
#X connect 3 1 2 0;
#X restore 253 416 pd pots_and_switches;
#N canvas 158 472 740 419 generic_data 0;
#X obj 25 122 repack;
#X obj 25 144 spigot;
#X obj 25 166 t l b;
#X obj 45 283 s connections;
#X obj 86 236 s shut_down;
#X obj 65 259 s num_io;
#X obj 25 190 route 0 1 2 3 4;
#X text 299 195 data that are not routed to module abstractions are
being groupped under the "generic_data" symbol and diffused with an
extra index \, a 0 for the analog pins resolution \, a 1 for the connections
data \, a 2 for the total number of inputs and outputs so that the
matrix can be created \, a 3 for shutting the system down \, and a
4 for the availability of the serial buffer of the Teensy (a simulation
actually \, so that all outgoing messages waiting to be processed are
first processed and the more messages can go in the buffer);
#X obj 25 19 inlet data;
#N canvas 633 413 524 374 route_data 0;
#X obj 25 107 inlet;
#X obj 311 86 inlet;
#X obj 71 316 outlet data;
#X obj 272 198 s \$0-route_gen_data;
#X obj 240 316 outlet num_data;
#X obj 272 176 0;
#X obj 272 133 spigot;
#X obj 311 109 1;
#X obj 344 116 0;
#X obj 272 155 t b b;
#X obj 71 278 spigot;
#X obj 48 152 spigot 1;
#X obj 101 129 == 0;
#X obj 48 195 1;
#X obj 48 174 t b f;
#X obj 25 129 t b f f;
#X obj 101 107 r \$0-route_gen_data;
#X obj 48 217 s \$0-route_gen_data;
#X obj 110 256 r \$0-route_gen_data;
#X text 31 22 due to depth first execution order in Pd \, the last
incoming byte will be received after the right inlet receives a bang.
for this reason we must use the technique below to reset the [spigot]s
in this subpatch;
#X connect 0 0 15 0;
#X connect 1 0 7 0;
#X connect 5 0 3 0;
#X connect 6 0 9 0;
#X connect 7 0 6 1;
#X connect 8 0 6 1;
#X connect 9 0 5 0;
#X connect 9 1 8 0;
#X connect 10 0 2 0;
#X connect 11 0 14 0;
#X connect 12 0 11 1;
#X connect 13 0 17 0;
#X connect 14 0 13 0;
#X connect 14 1 4 0;
#X connect 15 0 6 0;
#X connect 15 1 11 0;
#X connect 15 2 10 0;
#X connect 16 0 12 0;
#X connect 18 0 10 1;
#X restore 25 46 pd route_data;
#X obj 173 105 r \$0-close_spigots;
#X msg 173 127 0;
#X obj 208 143 r \$0-open_spigots;
#X obj 36 78 r \$0-clear_repacks;
#X msg 208 165 1;
#X obj 25 349 +;
#X obj 64 332 * 128;
#X obj 25 308 unpack;
#X obj 25 371 s analog_res;
#X obj 106 213 s \$0-serial_buffer_clear;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 6 0;
#X connect 2 1 9 1;
#X connect 6 0 17 0;
#X connect 6 1 3 0;
#X connect 6 2 5 0;
#X connect 6 3 4 0;
#X connect 6 4 19 0;
#X connect 8 0 9 0;
#X connect 9 0 0 0;
#X connect 9 1 0 1;
#X connect 10 0 11 0;
#X connect 11 0 1 1;
#X connect 12 0 14 0;
#X connect 13 0 0 0;
#X connect 14 0 1 1;
#X connect 15 0 18 0;
#X connect 16 0 15 1;
#X connect 17 0 15 0;
#X connect 17 1 16 0;
#X restore 165 445 pd generic_data;
#X obj 87 487 s \$0-close_spigots;
#X obj 47 532 s \$0-clear_repacks;
#X obj 27 555 s \$0-open_spigots;
#X obj 67 509 s \$0-reset_main_router;
#X connect 0 0 21 0;
#X connect 1 0 16 0;
#X connect 2 0 16 0;
#X connect 3 0 16 0;
#X connect 4 0 6 0;
#X connect 4 1 17 0;
#X connect 6 0 26 0;
#X connect 6 1 25 0;
#X connect 6 2 27 0;
#X connect 6 3 24 0;
#X connect 7 0 15 0;
#X connect 8 0 9 0;
#X connect 9 0 11 0;
#X connect 10 0 9 0;
#X connect 11 0 16 0;
#X connect 11 1 12 0;
#X connect 12 0 10 0;
#X connect 13 0 10 1;
#X connect 15 0 20 0;
#X connect 16 0 4 0;
#X connect 16 1 7 0;
#X connect 17 0 23 0;
#X connect 17 1 22 0;
#X connect 18 0 16 0;
#X connect 19 0 16 0;
#X connect 20 0 19 0;
#X connect 20 1 13 0;
#X connect 21 0 1 0;
#X connect 21 1 2 0;
#X connect 21 2 3 0;
#X connect 21 3 16 0;
