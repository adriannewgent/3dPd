#N canvas 259 82 989 742 10;
#X declare -path ../generic_abstractions;
#X obj 44 28 cnv 15 430 90 empty empty Declare_generic_abstractions_path
0 -12 0 14 -204786 -66577 0;
#X obj 51 83 declare -path ../generic_abstractions;
#X obj 484 28 cnv 15 490 90 empty empty Use_module_data_and_switch~
0 -12 0 14 -204786 -66577 0;
#X obj 497 69 module_data \$0 \$1 \$2 \$3;
#X text 493 34 [module_data \$0 \$1 \$2 \$3] must be used in all module
abstractions \, otherwise the whole system will not work;
#X text 555 93 <- control the DSP of the module accodring to its activity
;
#X obj 511 365 module_input~ 0;
#X obj 511 487 *~;
#X obj 657 392 r \$0-amp;
#X obj 657 414 pack f 20;
#X obj 657 436 line~;
#X obj 511 514 dac~ 1;
#X obj 641 487 *~;
#X obj 641 514 dac~ 2;
#X text 507 239 in this module we're just receiving two signals \,
we're controlling their amplitude \, and we're outputting them to the
first two channels of the sound card.;
#X obj 511 659 module_output~ 0;
#X obj 511 631 adc~ 1;
#X obj 641 631 adc~ 2;
#N canvas 1 82 1181 866 pots_and_switches 0;
#X obj 31 157 r module\$1;
#X text 112 156 <- get your potentiometer and switch data here;
#X obj 74 666 r analog_res;
#X text 146 771 <- [map_zero] maps a range starting from 0 to the value
of the first argument to a range from 0 to the second argument;
#X obj 31 770 map_zero 1023 1;
#X obj 31 792 s \$0-amp;
#X obj 86 233 change;
#X msg 86 415 dsp \$1;
#X obj 86 437 s pd;
#X obj 143 233 change;
#X obj 86 466 r pd;
#X obj 86 488 route dsp;
#X obj 143 256 patching_update;
#X obj 86 209 unpack f f;
#X obj 86 510 led_ctl 2;
#X obj 31 594 unpack f f;
#X obj 31 179 route pots switches;
#X obj 626 611 filter_pot 0.85;
#X text 742 609 <- filter the potentiometer values for further smoothing.
this is the same filtering techinque applied in the Arduino code. values
are from 0 to 1;
#X obj 626 677 xfade_ramp;
#X text 710 677 <- while the patching update is deactivated \, we can
set a ramp time for the cross-fade between the previous and the new
patch. this abstraction sets this ramp time. when the patching update
is re-activated and the cross-fade has finished \, the patching ramp
will return to its default value (provided in ms by the first argument
to [matrix_connections] \, defaults to 100);
#X text 30 33 evrey module receives potentiometer and switch data with
[r module\$1] \, where \$1 is the module index in the chain \, starting
from 0;
#X obj 31 616 filter_pot 0.85;
#X text 35 99 here we use two potentiometers and two switches;
#X text 260 257 <- one module MUST have this abstraction controlled
by a switch. this abstraction lets the main patch (modular_synthesizer.pd)
know whether the patching update is on or off. if you omit to include
this in your system \, the patching update will never go on and your
connections between modules will never go through \; being able to
enable or disable the patching update \, enables one to change the
physical patch without affecting the sound (e.g. if you want to filter
an oscillator that is currently being output unprocessed). this way
we can change our patch and when we're ready we can re-enable the patching
update and cross-fade between the old and the new patch;
#X text 126 436 <- turn the DSP on and off with this switch;
#X text 159 511 <- it's good to have visual feedback for the DSP state.
here we're controlling an LED wired to the third pin of the output
shift register of this module according to the DSP state. the argument
of the [led_ctl] abstraction is the LED pin number (starting from 0)
;
#X text 167 665 <- the resolution of the analog pins is sent from the
Teensy and received in the [arduino_data] abstraction. [map_zero] sets
a default 10-bit resolution (1st argument) since it's the standard
resolution of the Arduino \, and [r analog_res] changes it to the resolution
used \, in case it's different than 10-bit (like with the Teensy3.2
\, which is 13-bit);
#X connect 0 0 16 0;
#X connect 2 0 4 1;
#X connect 4 0 5 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 9 0 12 0;
#X connect 10 0 11 0;
#X connect 11 0 14 0;
#X connect 13 0 6 0;
#X connect 13 1 9 0;
#X connect 15 0 22 0;
#X connect 15 1 17 0;
#X connect 16 0 15 0;
#X connect 16 1 13 0;
#X connect 17 0 19 0;
#X connect 22 0 4 0;
#X restore 46 247 pd pots_and_switches;
#X text 45 129 this module is a simple adc~/dac~ \, which receives
two signals and outputs them to the first two channels of the sound
card \, and receives audio from the first two inputs of the sound card
and forwards it to the system.;
#X text 43 221 check the contents of the subpatch below;
#X obj 497 91 switch~;
#X obj 641 365 module_input~ 1;
#X obj 641 659 module_output~ 1;
#X text 50 34 you must declare the path to the generic abstractions
as they are used in all module abstractions;
#X text 509 305 the [module_input~] abstractions receive signals from
the matrix of the synthesizer. their argument is the module input number
starting from zero.;
#X text 509 550 two [adc~]s are included here in case the sound card
used has inputs. like the [module_input~] abstraction \, the signal
output of each module is forwarded to the system via the [module_output~]
abstraction. its argument if the module output number starting from
zero.;
#X text 506 129 [module_data] (apart from other functions) keeps track
of all the connections of a module. this way we can use it to control
a [switch~] so when a module has no connections the [switch~] can go
off. the outlet of the abstraction outputs a 1 when a connections is
made \, nothing when more connections are made \, and a 0 when all
the connections have been removed;
#X connect 3 0 21 0;
#X connect 6 0 7 0;
#X connect 7 0 11 0;
#X connect 8 0 9 0;
#X connect 9 0 10 0;
#X connect 10 0 7 1;
#X connect 10 0 12 1;
#X connect 12 0 13 0;
#X connect 16 0 15 0;
#X connect 17 0 23 0;
#X connect 22 0 12 0;
