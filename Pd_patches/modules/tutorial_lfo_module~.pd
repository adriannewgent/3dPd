#N canvas 563 82 1233 723 10;
#X declare -path ../generic_abstractions;
#X obj 44 28 cnv 15 435 90 empty empty Declare_generic_abstractions_path
0 -12 0 14 -204786 -66577 0;
#X obj 52 84 declare -path ../generic_abstractions;
#X obj 484 28 cnv 15 490 90 empty empty Use_module_data_and_switch~
0 -12 0 14 -204786 -66577 0;
#X obj 497 92 switch~;
#X text 493 34 [module_data \$0 \$1 \$2 \$3] must be used in all module
abstractions \, otherwise the whole system will not work;
#X text 555 93 <- control the DSP of the module accodring to its activity
;
#X obj 523 431 phasor~;
#X obj 523 453 +~;
#N canvas 251 166 781 565 freq 0;
#X obj 167 353 input_state 0;
#X obj 29 225 r \$0-freq;
#X obj 29 251 pack f 20;
#X obj 29 273 line~;
#X obj 100 336 *~;
#X obj 29 526 outlet~;
#X text 23 22 in this subpatch we're receiving the values of the first
potentiometer ([r \$0-freq]) and the first input signal of the module
([module_input~ 0]). [input_state 0] gives the connection state of
the signal input. if there is a signal (or more than one) connected
\, it will output a 1 \, otherwise it will output a zero.;
#X text 167 288 <- here we receive the signal of the first input of
the module.;
#X obj 116 289 inlet~;
#X obj 242 488 invert_state~;
#X obj 29 504 *~;
#X text 273 351 <- here we receive the connection state of the first
signal input of the module. the left outlet outputs a 1 immediately
when a connection is made and a 0 after the matrix ramp time has ended
\, when a connection is broken. the right outlet omits this matrix
ramp time delay;
#X obj 242 436 smooth_state~;
#X text 330 435 <- this abstraction smooths a control value according
to the matrix ramp time;
#X text 329 488 <- this abstraction inverts a unipolar value going
from 0 to 1;
#X text 22 108 if there's no signal connected to the first input \,
we'll use the potentiometer values to control the frequency of the
oscillator. if there is a signal connected to the first input \, we'll
use that signal to control the frequency \, and we'll use the potentiometer
to give an offset to the control signal.;
#X obj 100 314 +~;
#X connect 0 1 12 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 10 0;
#X connect 3 0 16 0;
#X connect 4 0 5 0;
#X connect 8 0 16 1;
#X connect 9 0 10 1;
#X connect 10 0 5 0;
#X connect 12 0 9 0;
#X connect 12 0 4 1;
#X connect 16 0 4 0;
#X restore 523 387 pd freq;
#N canvas 1 82 472 275 triangle~ 0;
#X obj 49 105 *~ -1;
#X obj 49 127 +~ 1;
#X obj 27 149 min~;
#X obj 27 63 wrap~;
#X obj 27 38 inlet~;
#X obj 27 200 outlet~;
#X obj 200 127 switch~;
#X obj 200 105 output_state 1;
#X text 76 62 we're using [wrap~] because of the phase modulation;
#X obj 27 171 *~ 2;
#X connect 0 0 1 0;
#X connect 1 0 2 1;
#X connect 2 0 9 0;
#X connect 3 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 7 0 6 0;
#X connect 9 0 5 0;
#X restore 649 535 pd triangle~;
#N canvas 1 82 397 234 sawtooth~ 0;
#X obj 27 63 wrap~;
#X obj 27 38 inlet~;
#X obj 27 85 outlet~;
#X obj 224 104 switch~;
#X obj 224 82 output_state 2;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 4 0 3 0;
#X restore 773 535 pd sawtooth~;
#N canvas 142 189 533 310 square~ 0;
#X obj 40 63 wrap~;
#X obj 40 38 inlet~;
#X obj 40 245 outlet~;
#X obj 40 177 <~;
#X obj 99 95 r \$0-duty_cycle;
#X obj 99 117 pack f 20;
#X obj 99 139 line~;
#X obj 241 207 *~;
#X obj 384 96 switch~;
#X obj 241 185 inlet~;
#X obj 240 100 input_state 2;
#X obj 384 74 output_state 3;
#X obj 315 123 smooth_state~;
#X obj 315 145 invert_state~;
#X obj 99 161 *~;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 14 0;
#X connect 7 0 3 1;
#X connect 9 0 7 0;
#X connect 10 1 12 0;
#X connect 11 0 8 0;
#X connect 12 0 13 0;
#X connect 12 0 7 1;
#X connect 13 0 14 1;
#X connect 14 0 3 1;
#X restore 899 535 pd square~;
#N canvas 1 82 520 371 sinewave~ 0;
#X obj 69 230 inlet~;
#X obj 69 252 cos~;
#X obj 69 323 outlet~;
#X obj 257 227 output_state 0;
#X obj 257 249 switch~;
#X text 46 105 in all four oscillators we're using the corresponding
output connection state to control the DSP of their subpatches. this
way we save some CPU when we're using the module \, but not all the
oscillators. in the case of this module the CPU usage of each oscillator
is very small \, but this DSP control technique is applied here as
a demonstration. in more CPU intensive modules it might be quite useful.
;
#X text 47 27 the [output_state] absrtaction works similarly to the
[input_state] abstraction. its argument is the module output number
starting from 0 it will output a 1 when this output is connected to
one or more inputs in the system \, and a 0 when it is not connected
to anything.;
#X obj 69 274 *~ 0.5;
#X obj 69 296 +~ 0.5;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 3 0 4 0;
#X connect 7 0 8 0;
#X connect 8 0 2 0;
#X restore 523 534 pd sinewave~;
#X text 516 141 the function of this module happens below \, where
we receive the scaled potentiometer values and the input signals. after
all the processing \, we send the resulting signals to the [module_output~]
abstractions which send their outputs to the matrix of the synthesizer.
;
#X text 521 619 the [module_output~] abstractions forward their incoming
signals to the matrix of the synthesizer. they are necessary in order
for each module to be connected to the rest of the system. their argument
is the output number starting from zero.;
#N canvas 1 82 738 503 pots_and_switches 0;
#X obj 39 128 r module\$1;
#X obj 39 459 s \$0-freq;
#X obj 139 258 r analog_res;
#X obj 96 364 s \$0-duty_cycle;
#X text 120 127 <- get your potentiometer and switch data here;
#X text 215 200 <- filter the potentiometer values for further smoothing.
this is the same filtering techinque applied in the Arduino code. values
are from 0 to 1;
#X text 244 258 <- the resolution of the analog pins is sent from the
Teensy and received in [arduino_data]. from there it is sent to [r
analog_res]. [map_zero] sets a default 10-bit resolution (1st argument)
since it's the standard resolution of the Arduino \, and [r analog_res]
changes it to the resolution used \, in case it's different than 10-bit
(like with the Teensy3.2 \, which is 13-bit);
#X text 213 365 <- this goes in [pd square~];
#X obj 39 391 filter_pot 0.85;
#X obj 96 201 filter_pot 0.85;
#X text 44 21 evrey module receives potentiometer and switch data with
[r module\$1] \, where \$1 is the module index in the chain \, starting
from 0;
#X obj 39 176 unpack f f;
#X obj 39 150 route pots;
#X text 43 81 here we're using two potentiometers;
#X obj 39 413 tabread exp_tab;
#X obj 39 435 * 40;
#X obj 96 342 map_zero 1023 1;
#X connect 0 0 12 0;
#X connect 2 0 16 1;
#X connect 8 0 14 0;
#X connect 9 0 16 0;
#X connect 11 0 8 0;
#X connect 11 1 9 0;
#X connect 12 0 11 0;
#X connect 14 0 15 0;
#X connect 15 0 1 0;
#X connect 16 0 3 0;
#X restore 50 207 pd pots_and_switches;
#X obj 497 69 module_data \$0 \$1 \$2 \$3;
#X text 48 184 check the contents of the subpatch below;
#X text 648 342 second input modulates the phase of the oscillators
;
#X text 518 234 we receive input signals using the [module_input~]
abstraction. this abstraction is necessary for each module to receive
signals from the rest of the system. its argument if the number of
the module input starting from zero.;
#X text 357 388 check this subpatch ->;
#X text 961 489 this is a CV for the duty cycle;
#X text 237 534 check the four oscillator subpatches ->;
#X text 316 571 check the metadata subpatches ->;
#N canvas 338 320 468 340 metadata0 0;
#X obj 33 239 loadbang;
#X obj 33 283 outlet;
#X text 33 31 the [module_input~] and [module_output~] abstractions
support metadata which are passed from an output to a connecting input.
metadata can be very helpful in case a module's input needs to know
what it is connected to (as an example the [tutorial_envelope_module~]
abstraction utilizes the "polarity" metadata of the oscillator) \;
the syntax of the metadata is the following \, first comes a key which
is used as an identifier \, then a colon \, the the value of the key.
key-value pairs are separated by an upright slash. if you fail to use
this syntax the metadata system won't work and it's very likely that
Pd will crash \; metadata of an outlet are fixed and set on load and
they can't be changed;
#X msg 33 261 type : lfo | waveform : sine | polarity : uni;
#X connect 0 0 3 0;
#X connect 3 0 1 0;
#X restore 616 571 pd metadata0;
#N canvas 1 82 450 300 metadata1 0;
#X obj 43 139 outlet;
#X obj 43 89 loadbang;
#X msg 43 114 type : lfo | waveform : tri | polarity : uni;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X restore 742 571 pd metadata1;
#N canvas 1 82 450 300 metadata2 0;
#X obj 43 137 outlet;
#X obj 43 89 loadbang;
#X msg 43 113 type : lfo | waveform : saw | polarity : uni;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X restore 867 571 pd metadata2;
#N canvas 1 82 450 300 metadata3 0;
#X obj 43 136 outlet;
#X obj 43 89 loadbang;
#X msg 43 113 type : lfo | waveform : square | polarity : uni;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X restore 992 571 pd metadata3;
#X text 45 133 this module is a simple LFO with the four standard waveforms
(sine \, triangle \, sawtooth \, and square). their output signals
are unipolar;
#X obj 523 362 module_input~ 0;
#X obj 643 362 module_input~ 1;
#X obj 957 511 module_input~ 2;
#X obj 523 595 module_output~ 0;
#X obj 649 595 module_output~ 1;
#X obj 773 595 module_output~ 2;
#X obj 899 595 module_output~ 3;
#X text 50 34 you must declare the path to the generic abstractions
as they are used in all module abstractions;
#X connect 6 0 7 0;
#X connect 7 0 9 0;
#X connect 7 0 10 0;
#X connect 7 0 11 0;
#X connect 7 0 12 0;
#X connect 8 0 6 0;
#X connect 9 0 33 0;
#X connect 10 0 34 0;
#X connect 11 0 35 0;
#X connect 12 0 32 0;
#X connect 16 0 3 0;
#X connect 24 0 32 1;
#X connect 25 0 33 1;
#X connect 26 0 34 1;
#X connect 27 0 35 1;
#X connect 29 0 8 0;
#X connect 30 0 7 1;
#X connect 31 0 11 1;
