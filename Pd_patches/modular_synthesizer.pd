#N canvas 234 242 738 690 10;
#X declare -path ./generic_abstractions -path ./modules -path ./modules/module_abstractions
-path ./modules/module_clones -path /usr/lib/pd/extra/zexy -lib zexy
-path /usr/lib/pd/extra/iemmatrix -lib iemmatrix -path /usr/lib/pd/extra/comport
-path /home/pi/pd-externals/iemguts;
#X text 82 439 close serial port;
#X text 44 343 check serial devices;
#X floatatom 57 393 5 0 0 0 - - -, f 5;
#X text 55 378 open serial port;
#X text 68 407 open device by name;
#X symbolatom 70 424 0 0 0 0 - - -;
#X msg 45 360 devices;
#X msg 83 456 close;
#X obj 90 532 r to_comport;
#N canvas 424 155 397 357 modules 0;
#X text 41 15 Module abstraction arguments:;
#X text 40 53 2nd: number of inlets;
#X text 40 71 3rd: number of outlets;
#N canvas 1172 303 619 539 init 0;
#X obj 17 67 loadbang;
#X text 15 267 if a resolution for the analog pins other than 10-bit
is used \, it will be sent over serial on boot \, and it will be received
below;
#X obj 21 320 r resolution;
#X obj 21 456 s analog_res;
#X obj 17 111 t b b;
#X obj 17 156 del 100;
#X obj 49 135 s module_data1;
#X text 17 18 Delay a bang to [r module_data1] so that all [module_data]
abstractions have time to set the [s ] name for the next module;
#X obj 17 89 del 250;
#X text 71 156 query the analogReadResolution;
#X msg 17 178 print a;
#X obj 17 200 s to_comport;
#X obj 21 433 +;
#X obj 88 416 * 128;
#X obj 183 394 bug13;
#X obj 183 372 unpack f f f f;
#X obj 246 394 bug13;
#X obj 21 372 unpack f f;
#X text 178 339 if you're facing the 13_bug \, replace [unpack f f]
to the left with the objects below;
#X connect 0 0 8 0;
#X connect 2 0 17 0;
#X connect 4 0 5 0;
#X connect 4 1 6 0;
#X connect 5 0 10 0;
#X connect 8 0 4 0;
#X connect 10 0 11 0;
#X connect 12 0 3 0;
#X connect 13 0 12 1;
#X connect 15 0 14 0;
#X connect 15 1 14 1;
#X connect 15 2 16 0;
#X connect 15 3 16 1;
#X connect 17 0 12 0;
#X connect 17 1 13 0;
#X restore 42 103 pd init;
#X text 103 103 <- stuff needed on load;
#X text 40 35 1st: module number \, starting from 1;
#X obj 41 162 tutorial_dac_module~ 1 2 0;
#X obj 41 189 tutorial_envelope_module~ 2 4 4;
#X obj 41 216 tutorial_filter_module~ 3 4 8;
#X obj 41 243 tutorial_oscillator_module~ 4 4 4;
#X obj 41 270 tutorial_oscillator_module~ 5 4 4;
#X restore 45 633 pd modules;
#X floatatom 91 483 5 0 0 0 - - -, f 5;
#X msg 91 502 baud \$1;
#N canvas 673 634 653 283 poweroff 0;
#X obj 45 129 spigot;
#N canvas 971 116 679 389 shut_down_script 0;
#X obj 100 268 shell;
#X obj 100 195 inlet;
#X obj 100 217 spigot;
#X obj 169 156 loadbang;
#X obj 169 178 del 1000;
#X msg 169 200 1;
#X text 201 198 a 1 second safety delay;
#X msg 100 244 poweroff;
#X text 166 244 running "sudo chmod a+s /sbin/poweroff" enables sudoers
to run "poweroff" without the use of "sudo" and a password;
#X text 79 77 This subpatch powers off the Pi. You can also create
some visual feedback (like blink an LED of the synthesizer) to denote
that the Pi is going for power off;
#X connect 1 0 2 0;
#X connect 2 0 7 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 2 1;
#X connect 7 0 0 0;
#X restore 45 200 pd shut_down_script;
#X obj 141 68 r pd;
#X obj 141 90 route dsp;
#X obj 141 112 == 0;
#X text 138 49 let the power off switch through only when the DSP is
off;
#N canvas 627 408 305 310 safety_mechanism 0;
#X obj 50 195 > 2000;
#X obj 50 28 inlet;
#X obj 50 262 outlet;
#X obj 50 100 f;
#X obj 80 100 + 1;
#X msg 65 75 0;
#X obj 50 123 sel 0 1;
#X obj 82 149 t b b;
#X obj 50 173 timer;
#N canvas 321 207 450 300 debounce 0;
#X obj 87 78 inlet;
#X obj 87 100 spigot 1;
#X obj 87 122 t a b;
#X obj 163 61 t b b;
#X obj 163 105 del 50;
#X msg 163 127 1;
#X msg 190 83 0;
#X obj 87 144 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 7 0;
#X connect 2 1 3 0;
#X connect 3 0 4 0;
#X connect 3 1 6 0;
#X connect 4 0 5 0;
#X connect 5 0 1 1;
#X connect 6 0 1 1;
#X restore 50 50 pd debounce;
#X obj 50 217 sel 1 0;
#X obj 73 240 outlet too_short;
#X connect 0 0 10 0;
#X connect 1 0 9 0;
#X connect 3 0 4 0;
#X connect 3 0 6 0;
#X connect 4 0 3 1;
#X connect 5 0 3 1;
#X connect 6 0 8 0;
#X connect 6 1 7 0;
#X connect 7 0 8 1;
#X connect 7 1 5 0;
#X connect 8 0 0 0;
#X connect 9 0 3 0;
#X connect 10 0 2 0;
#X connect 10 1 11 0;
#X restore 45 153 pd safety_mechanism;
#X obj 45 43 r shut_down;
#X text 188 153 bangs when the switch off button has been held for
a too short time \, you can utilize it to give some visual feedback
;
#X connect 0 0 6 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 0 1;
#X connect 6 0 1 0;
#X connect 7 0 0 0;
#X restore 45 660 pd poweroff;
#X text 186 533 <- various messages for the Arduino;
#X text 40 190 declare the path to the generic_abstractions and the
modules abstractions \, and the paths to the zexy \, iemmatrix \, comport
\, and iemguts libraries \, and load the zexy and iemmatrix libraries
;
#X text 157 565 <- argument is serial port;
#X text 235 601 <- arguments are matrix ramp time and debounce time
(both default to 100);
#X obj 45 599 matrix_connections 100 100;
#X obj 45 566 arduino_data 0;
#X obj 42 255 declare -path ./generic_abstractions -path ./modules
-path ./modules/module_abstractions -path ./modules/module_clones -path
/usr/lib/pd/extra/zexy -lib zexy -path /usr/lib/pd/extra/iemmatrix
-lib iemmatrix -path /usr/lib/pd/extra/comport -path /home/pi/pd-externals/iemguts
;
#X text 40 22 This is the patch for the modular synthesizer. In this
patch the four tutorial module abstractions are used (in [pd modules])
\, where the oscillator abstraction is being used twice.;
#X text 40 79 This patch works only with the corresponding Arduino
sketch and the corresponding hardware (you need to have the Teensy
connected otherwise the patch won't work);
#X text 40 124 Read the tutorial modular abstractions and the Arduino
sketch \, to understand how this setup works;
#X connect 2 0 18 0;
#X connect 5 0 18 0;
#X connect 6 0 18 0;
#X connect 7 0 18 0;
#X connect 8 0 18 0;
#X connect 10 0 11 0;
#X connect 11 0 18 0;
